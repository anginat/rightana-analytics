// Code generated by protoc-gen-go. DO NOT EDIT.
// source: models.proto

/*
Package db is a generated protocol buffer package.

It is generated from these files:
	models.proto

It has these top-level messages:
	User
	Teammate
	Collection
	AuthToken
	Session
	Pageview
*/
package db

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type User struct {
	Email    string `protobuf:"bytes,1,opt,name=Email,json=email" json:"Email,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=Password,json=password" json:"Password,omitempty"`
	Created  int64  `protobuf:"varint,3,opt,name=Created,json=created" json:"Created,omitempty"`
	Name     string `protobuf:"bytes,4,opt,name=Name,json=name" json:"Name,omitempty"`
	IsAdmin  bool   `protobuf:"varint,10,opt,name=IsAdmin,json=isAdmin" json:"IsAdmin,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *User) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetIsAdmin() bool {
	if m != nil {
		return m.IsAdmin
	}
	return false
}

type Teammate struct {
	Email string `protobuf:"bytes,1,opt,name=Email,json=email" json:"Email,omitempty"`
}

func (m *Teammate) Reset()                    { *m = Teammate{} }
func (m *Teammate) String() string            { return proto.CompactTextString(m) }
func (*Teammate) ProtoMessage()               {}
func (*Teammate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Teammate) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type Collection struct {
	ID         string      `protobuf:"bytes,1,opt,name=ID,json=iD" json:"ID,omitempty"`
	OwnerEmail string      `protobuf:"bytes,2,opt,name=OwnerEmail,json=ownerEmail" json:"OwnerEmail,omitempty"`
	Name       string      `protobuf:"bytes,3,opt,name=Name,json=name" json:"Name,omitempty"`
	Teammates  []*Teammate `protobuf:"bytes,4,rep,name=Teammates,json=teammates" json:"Teammates,omitempty"`
	Created    int64       `protobuf:"varint,5,opt,name=Created,json=created" json:"Created,omitempty"`
}

func (m *Collection) Reset()                    { *m = Collection{} }
func (m *Collection) String() string            { return proto.CompactTextString(m) }
func (*Collection) ProtoMessage()               {}
func (*Collection) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Collection) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Collection) GetOwnerEmail() string {
	if m != nil {
		return m.OwnerEmail
	}
	return ""
}

func (m *Collection) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Collection) GetTeammates() []*Teammate {
	if m != nil {
		return m.Teammates
	}
	return nil
}

func (m *Collection) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

type AuthToken struct {
	ID         string `protobuf:"bytes,1,opt,name=ID,json=iD" json:"ID,omitempty"`
	OwnerEmail string `protobuf:"bytes,2,opt,name=OwnerEmail,json=ownerEmail" json:"OwnerEmail,omitempty"`
	TTL        int32  `protobuf:"varint,3,opt,name=TTL,json=tTL" json:"TTL,omitempty"`
	Created    int64  `protobuf:"varint,4,opt,name=Created,json=created" json:"Created,omitempty"`
}

func (m *AuthToken) Reset()                    { *m = AuthToken{} }
func (m *AuthToken) String() string            { return proto.CompactTextString(m) }
func (*AuthToken) ProtoMessage()               {}
func (*AuthToken) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AuthToken) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *AuthToken) GetOwnerEmail() string {
	if m != nil {
		return m.OwnerEmail
	}
	return ""
}

func (m *AuthToken) GetTTL() int32 {
	if m != nil {
		return m.TTL
	}
	return 0
}

func (m *AuthToken) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

type Session struct {
	Duration         int32  `protobuf:"varint,1,opt,name=Duration,json=duration" json:"Duration,omitempty"`
	Hostname         string `protobuf:"bytes,2,opt,name=Hostname,json=hostname" json:"Hostname,omitempty"`
	DeviceOS         string `protobuf:"bytes,3,opt,name=DeviceOS,json=deviceOS" json:"DeviceOS,omitempty"`
	BrowserName      string `protobuf:"bytes,4,opt,name=BrowserName,json=browserName" json:"BrowserName,omitempty"`
	BrowserVersion   string `protobuf:"bytes,5,opt,name=BrowserVersion,json=browserVersion" json:"BrowserVersion,omitempty"`
	BrowserLanguage  string `protobuf:"bytes,6,opt,name=BrowserLanguage,json=browserLanguage" json:"BrowserLanguage,omitempty"`
	ScreenResolution string `protobuf:"bytes,7,opt,name=ScreenResolution,json=screenResolution" json:"ScreenResolution,omitempty"`
	WindowResolution string `protobuf:"bytes,8,opt,name=WindowResolution,json=windowResolution" json:"WindowResolution,omitempty"`
	DeviceType       string `protobuf:"bytes,9,opt,name=DeviceType,json=deviceType" json:"DeviceType,omitempty"`
	CountryCode      string `protobuf:"bytes,10,opt,name=CountryCode,json=countryCode" json:"CountryCode,omitempty"`
	City             string `protobuf:"bytes,11,opt,name=City,json=city" json:"City,omitempty"`
	UserAgent        string `protobuf:"bytes,12,opt,name=UserAgent,json=userAgent" json:"UserAgent,omitempty"`
	UserIP           string `protobuf:"bytes,13,opt,name=UserIP,json=userIP" json:"UserIP,omitempty"`
	UserHostname     string `protobuf:"bytes,14,opt,name=UserHostname,json=userHostname" json:"UserHostname,omitempty"`
	Referrer         string `protobuf:"bytes,15,opt,name=Referrer,json=referrer" json:"Referrer,omitempty"`
	ASNumber         int32  `protobuf:"varint,16,opt,name=ASNumber,json=aSNumber" json:"ASNumber,omitempty"`
	ASName           string `protobuf:"bytes,17,opt,name=ASName,json=aSName" json:"ASName,omitempty"`
}

func (m *Session) Reset()                    { *m = Session{} }
func (m *Session) String() string            { return proto.CompactTextString(m) }
func (*Session) ProtoMessage()               {}
func (*Session) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Session) GetDuration() int32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *Session) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *Session) GetDeviceOS() string {
	if m != nil {
		return m.DeviceOS
	}
	return ""
}

func (m *Session) GetBrowserName() string {
	if m != nil {
		return m.BrowserName
	}
	return ""
}

func (m *Session) GetBrowserVersion() string {
	if m != nil {
		return m.BrowserVersion
	}
	return ""
}

func (m *Session) GetBrowserLanguage() string {
	if m != nil {
		return m.BrowserLanguage
	}
	return ""
}

func (m *Session) GetScreenResolution() string {
	if m != nil {
		return m.ScreenResolution
	}
	return ""
}

func (m *Session) GetWindowResolution() string {
	if m != nil {
		return m.WindowResolution
	}
	return ""
}

func (m *Session) GetDeviceType() string {
	if m != nil {
		return m.DeviceType
	}
	return ""
}

func (m *Session) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *Session) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *Session) GetUserAgent() string {
	if m != nil {
		return m.UserAgent
	}
	return ""
}

func (m *Session) GetUserIP() string {
	if m != nil {
		return m.UserIP
	}
	return ""
}

func (m *Session) GetUserHostname() string {
	if m != nil {
		return m.UserHostname
	}
	return ""
}

func (m *Session) GetReferrer() string {
	if m != nil {
		return m.Referrer
	}
	return ""
}

func (m *Session) GetASNumber() int32 {
	if m != nil {
		return m.ASNumber
	}
	return 0
}

func (m *Session) GetASName() string {
	if m != nil {
		return m.ASName
	}
	return ""
}

type Pageview struct {
	Path        string `protobuf:"bytes,1,opt,name=Path,json=path" json:"Path,omitempty"`
	QueryString string `protobuf:"bytes,2,opt,name=QueryString,json=queryString" json:"QueryString,omitempty"`
}

func (m *Pageview) Reset()                    { *m = Pageview{} }
func (m *Pageview) String() string            { return proto.CompactTextString(m) }
func (*Pageview) ProtoMessage()               {}
func (*Pageview) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Pageview) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Pageview) GetQueryString() string {
	if m != nil {
		return m.QueryString
	}
	return ""
}

func init() {
	proto.RegisterType((*User)(nil), "db.User")
	proto.RegisterType((*Teammate)(nil), "db.Teammate")
	proto.RegisterType((*Collection)(nil), "db.Collection")
	proto.RegisterType((*AuthToken)(nil), "db.AuthToken")
	proto.RegisterType((*Session)(nil), "db.Session")
	proto.RegisterType((*Pageview)(nil), "db.Pageview")
}

func init() { proto.RegisterFile("models.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 560 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x56, 0x12, 0x27, 0xb1, 0xc7, 0x21, 0x0d, 0x2b, 0x84, 0x56, 0x15, 0x42, 0x96, 0x0f, 0x28,
	0xea, 0xa1, 0x07, 0x78, 0x01, 0x42, 0x8a, 0x44, 0xa5, 0xaa, 0x2d, 0xb6, 0x81, 0xf3, 0xda, 0x1e,
	0x1c, 0x8b, 0xd8, 0x1b, 0x76, 0xd7, 0xb5, 0x72, 0xe3, 0x29, 0x78, 0x07, 0xde, 0x12, 0xed, 0x7a,
	0x93, 0x3a, 0x15, 0x17, 0x8e, 0xdf, 0xcf, 0x6a, 0xe6, 0x9b, 0x19, 0x1b, 0x66, 0x15, 0xcf, 0x71,
	0x2b, 0x2f, 0x77, 0x82, 0x2b, 0x4e, 0x86, 0x79, 0x1a, 0xfe, 0x1a, 0x80, 0xf3, 0x45, 0xa2, 0x20,
	0x2f, 0x60, 0xfc, 0xb1, 0x62, 0xe5, 0x96, 0x0e, 0x82, 0xc1, 0xd2, 0x8b, 0xc6, 0xa8, 0x01, 0x39,
	0x07, 0xf7, 0x9e, 0x49, 0xd9, 0x72, 0x91, 0xd3, 0xa1, 0x11, 0xdc, 0x9d, 0xc5, 0x84, 0xc2, 0x74,
	0x2d, 0x90, 0x29, 0xcc, 0xe9, 0x28, 0x18, 0x2c, 0x47, 0xd1, 0x34, 0xeb, 0x20, 0x21, 0xe0, 0xdc,
	0xb2, 0x0a, 0xa9, 0x63, 0x5e, 0x38, 0x35, 0xab, 0x50, 0xbb, 0xaf, 0xe5, 0x2a, 0xaf, 0xca, 0x9a,
	0x42, 0x30, 0x58, 0xba, 0xd1, 0xb4, 0xec, 0x60, 0x18, 0x80, 0x9b, 0x20, 0xab, 0x2a, 0xa6, 0xf0,
	0xdf, 0x5d, 0x84, 0xbf, 0x07, 0x00, 0x6b, 0xbe, 0xdd, 0x62, 0xa6, 0x4a, 0x5e, 0x93, 0x39, 0x0c,
	0xaf, 0xaf, 0xac, 0x63, 0x58, 0x5e, 0x91, 0xd7, 0x00, 0x77, 0x6d, 0x8d, 0xa2, 0x7b, 0xd9, 0xb5,
	0x09, 0xfc, 0xc8, 0x1c, 0xdb, 0x19, 0xf5, 0xda, 0xb9, 0x00, 0xef, 0x50, 0x54, 0x52, 0x27, 0x18,
	0x2d, 0xfd, 0xb7, 0xb3, 0xcb, 0x3c, 0xbd, 0x3c, 0x90, 0x91, 0xa7, 0x0e, 0x72, 0x3f, 0xe8, 0xf8,
	0x24, 0x68, 0x58, 0x80, 0xb7, 0x6a, 0xd4, 0x26, 0xe1, 0x3f, 0xf0, 0xff, 0xdb, 0x5a, 0xc0, 0x28,
	0x49, 0x6e, 0x4c, 0x57, 0xe3, 0x68, 0xa4, 0x92, 0x9b, 0x7e, 0x21, 0xe7, 0xb4, 0xd0, 0x1f, 0x07,
	0xa6, 0x31, 0x4a, 0xa9, 0xe3, 0x9f, 0x83, 0x7b, 0xd5, 0x08, 0xa6, 0x47, 0x61, 0xaa, 0x8d, 0x23,
	0x37, 0xb7, 0x58, 0x6b, 0x9f, 0xb8, 0x54, 0x3a, 0xe2, 0x61, 0x5f, 0x1b, 0x8b, 0xcd, 0x3b, 0x7c,
	0x28, 0x33, 0xbc, 0x8b, 0xed, 0x28, 0xdc, 0xdc, 0x62, 0x12, 0x80, 0xff, 0x41, 0xf0, 0x56, 0xa2,
	0xe8, 0x2d, 0xce, 0x4f, 0x1f, 0x29, 0xf2, 0x06, 0xe6, 0xd6, 0xf1, 0x15, 0x85, 0xee, 0xc3, 0xcc,
	0xc2, 0x8b, 0xe6, 0xe9, 0x09, 0x4b, 0x96, 0x70, 0x66, 0x7d, 0x37, 0xac, 0x2e, 0x1a, 0x56, 0x20,
	0x9d, 0x18, 0xe3, 0x59, 0x7a, 0x4a, 0x93, 0x0b, 0x58, 0xc4, 0x99, 0x40, 0xac, 0x23, 0x94, 0x7c,
	0xdb, 0x98, 0x3c, 0x53, 0x63, 0x5d, 0xc8, 0x27, 0xbc, 0xf6, 0x7e, 0x2b, 0xeb, 0x9c, 0xb7, 0x3d,
	0xaf, 0xdb, 0x79, 0xdb, 0x27, 0xbc, 0x9e, 0x7b, 0x97, 0x33, 0xd9, 0xef, 0x90, 0x7a, 0xdd, 0xdc,
	0xf3, 0x23, 0xa3, 0xb3, 0xae, 0x79, 0x53, 0x2b, 0xb1, 0x5f, 0xf3, 0x1c, 0xcd, 0x35, 0x7a, 0x91,
	0x9f, 0x3d, 0x52, 0xfa, 0x60, 0xd6, 0xa5, 0xda, 0x53, 0xbf, 0x3b, 0x98, 0xac, 0x54, 0x7b, 0xf2,
	0x0a, 0x3c, 0xfd, 0x9d, 0xac, 0x0a, 0xac, 0x15, 0x9d, 0x19, 0xc1, 0x6b, 0x0e, 0x04, 0x79, 0x09,
	0x13, 0xad, 0x5e, 0xdf, 0xd3, 0x67, 0x46, 0x9a, 0x34, 0x06, 0x91, 0x10, 0x66, 0x9a, 0x3f, 0xee,
	0x64, 0x6e, 0xd4, 0x59, 0xd3, 0xe3, 0xf4, 0x5e, 0x22, 0xfc, 0x8e, 0x42, 0xa0, 0xa0, 0x67, 0xdd,
	0x5e, 0x84, 0xc5, 0x5a, 0x5b, 0xc5, 0xb7, 0x4d, 0x95, 0xa2, 0xa0, 0x8b, 0x6e, 0xd7, 0xcc, 0x62,
	0x5d, 0x73, 0x15, 0x9b, 0x75, 0x3d, 0xef, 0x6a, 0x32, 0x83, 0xc2, 0xf7, 0xfa, 0x9b, 0x2d, 0xf0,
	0xa1, 0xc4, 0x56, 0x27, 0xb9, 0x67, 0x6a, 0x63, 0xaf, 0xd2, 0xd9, 0x31, 0xb5, 0xd1, 0xf9, 0x3f,
	0x37, 0x28, 0xf6, 0xb1, 0x12, 0x65, 0x5d, 0xd8, 0x33, 0xf1, 0x7f, 0x3e, 0x52, 0xe9, 0xc4, 0xfc,
	0x1f, 0xde, 0xfd, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x40, 0x49, 0x60, 0x79, 0x2f, 0x04, 0x00, 0x00,
}
