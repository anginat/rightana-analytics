// Code generated by protoc-gen-go. DO NOT EDIT.
// source: models.proto

/*
Package db is a generated protocol buffer package.

It is generated from these files:
	models.proto

It has these top-level messages:
	User
	Teammate
	Collection
	AuthToken
	Session
	Pageview
*/
package db

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type User struct {
	ID                   uint64 `protobuf:"varint,1,opt,name=ID,json=iD" json:"ID,omitempty"`
	Email                string `protobuf:"bytes,2,opt,name=Email,json=email" json:"Email,omitempty"`
	Password             string `protobuf:"bytes,3,opt,name=Password,json=password" json:"Password,omitempty"`
	Created              int64  `protobuf:"varint,4,opt,name=Created,json=created" json:"Created,omitempty"`
	Name                 string `protobuf:"bytes,5,opt,name=Name,json=name" json:"Name,omitempty"`
	IsAdmin              bool   `protobuf:"varint,10,opt,name=IsAdmin,json=isAdmin" json:"IsAdmin,omitempty"`
	DisablePwChange      bool   `protobuf:"varint,11,opt,name=DisablePwChange,json=disablePwChange" json:"DisablePwChange,omitempty"`
	LimitCollections     bool   `protobuf:"varint,12,opt,name=LimitCollections,json=limitCollections" json:"LimitCollections,omitempty"`
	CollectionLimit      uint32 `protobuf:"varint,13,opt,name=CollectionLimit,json=collectionLimit" json:"CollectionLimit,omitempty"`
	DisableUserDeletion  bool   `protobuf:"varint,14,opt,name=DisableUserDeletion,json=disableUserDeletion" json:"DisableUserDeletion,omitempty"`
	EmailVerified        bool   `protobuf:"varint,20,opt,name=EmailVerified,json=emailVerified" json:"EmailVerified,omitempty"`
	EmailVerificationKey string `protobuf:"bytes,21,opt,name=EmailVerificationKey,json=emailVerificationKey" json:"EmailVerificationKey,omitempty"`
	EmailVerificationAt  int64  `protobuf:"varint,22,opt,name=EmailVerificationAt,json=emailVerificationAt" json:"EmailVerificationAt,omitempty"`
	PasswordResetKey     string `protobuf:"bytes,23,opt,name=PasswordResetKey,json=passwordResetKey" json:"PasswordResetKey,omitempty"`
	PasswordResetAt      int64  `protobuf:"varint,24,opt,name=PasswordResetAt,json=passwordResetAt" json:"PasswordResetAt,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *User) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *User) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetIsAdmin() bool {
	if m != nil {
		return m.IsAdmin
	}
	return false
}

func (m *User) GetDisablePwChange() bool {
	if m != nil {
		return m.DisablePwChange
	}
	return false
}

func (m *User) GetLimitCollections() bool {
	if m != nil {
		return m.LimitCollections
	}
	return false
}

func (m *User) GetCollectionLimit() uint32 {
	if m != nil {
		return m.CollectionLimit
	}
	return 0
}

func (m *User) GetDisableUserDeletion() bool {
	if m != nil {
		return m.DisableUserDeletion
	}
	return false
}

func (m *User) GetEmailVerified() bool {
	if m != nil {
		return m.EmailVerified
	}
	return false
}

func (m *User) GetEmailVerificationKey() string {
	if m != nil {
		return m.EmailVerificationKey
	}
	return ""
}

func (m *User) GetEmailVerificationAt() int64 {
	if m != nil {
		return m.EmailVerificationAt
	}
	return 0
}

func (m *User) GetPasswordResetKey() string {
	if m != nil {
		return m.PasswordResetKey
	}
	return ""
}

func (m *User) GetPasswordResetAt() int64 {
	if m != nil {
		return m.PasswordResetAt
	}
	return 0
}

type Teammate struct {
	ID uint64 `protobuf:"varint,1,opt,name=ID,json=iD" json:"ID,omitempty"`
}

func (m *Teammate) Reset()                    { *m = Teammate{} }
func (m *Teammate) String() string            { return proto.CompactTextString(m) }
func (*Teammate) ProtoMessage()               {}
func (*Teammate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Teammate) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type Collection struct {
	ID        string      `protobuf:"bytes,1,opt,name=ID,json=iD" json:"ID,omitempty"`
	OwnerID   uint64      `protobuf:"varint,2,opt,name=OwnerID,json=ownerID" json:"OwnerID,omitempty"`
	Name      string      `protobuf:"bytes,3,opt,name=Name,json=name" json:"Name,omitempty"`
	Teammates []*Teammate `protobuf:"bytes,4,rep,name=Teammates,json=teammates" json:"Teammates,omitempty"`
	Created   int64       `protobuf:"varint,5,opt,name=Created,json=created" json:"Created,omitempty"`
}

func (m *Collection) Reset()                    { *m = Collection{} }
func (m *Collection) String() string            { return proto.CompactTextString(m) }
func (*Collection) ProtoMessage()               {}
func (*Collection) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Collection) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Collection) GetOwnerID() uint64 {
	if m != nil {
		return m.OwnerID
	}
	return 0
}

func (m *Collection) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Collection) GetTeammates() []*Teammate {
	if m != nil {
		return m.Teammates
	}
	return nil
}

func (m *Collection) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

type AuthToken struct {
	ID      string `protobuf:"bytes,1,opt,name=ID,json=iD" json:"ID,omitempty"`
	OwnerID uint64 `protobuf:"varint,2,opt,name=OwnerID,json=ownerID" json:"OwnerID,omitempty"`
	TTL     int32  `protobuf:"varint,3,opt,name=TTL,json=tTL" json:"TTL,omitempty"`
	Created int64  `protobuf:"varint,4,opt,name=Created,json=created" json:"Created,omitempty"`
}

func (m *AuthToken) Reset()                    { *m = AuthToken{} }
func (m *AuthToken) String() string            { return proto.CompactTextString(m) }
func (*AuthToken) ProtoMessage()               {}
func (*AuthToken) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AuthToken) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *AuthToken) GetOwnerID() uint64 {
	if m != nil {
		return m.OwnerID
	}
	return 0
}

func (m *AuthToken) GetTTL() int32 {
	if m != nil {
		return m.TTL
	}
	return 0
}

func (m *AuthToken) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

type Session struct {
	Duration         int32  `protobuf:"varint,1,opt,name=Duration,json=duration" json:"Duration,omitempty"`
	Hostname         string `protobuf:"bytes,2,opt,name=Hostname,json=hostname" json:"Hostname,omitempty"`
	DeviceOS         string `protobuf:"bytes,3,opt,name=DeviceOS,json=deviceOS" json:"DeviceOS,omitempty"`
	BrowserName      string `protobuf:"bytes,4,opt,name=BrowserName,json=browserName" json:"BrowserName,omitempty"`
	BrowserVersion   string `protobuf:"bytes,5,opt,name=BrowserVersion,json=browserVersion" json:"BrowserVersion,omitempty"`
	BrowserLanguage  string `protobuf:"bytes,6,opt,name=BrowserLanguage,json=browserLanguage" json:"BrowserLanguage,omitempty"`
	ScreenResolution string `protobuf:"bytes,7,opt,name=ScreenResolution,json=screenResolution" json:"ScreenResolution,omitempty"`
	WindowResolution string `protobuf:"bytes,8,opt,name=WindowResolution,json=windowResolution" json:"WindowResolution,omitempty"`
	DeviceType       string `protobuf:"bytes,9,opt,name=DeviceType,json=deviceType" json:"DeviceType,omitempty"`
	CountryCode      string `protobuf:"bytes,10,opt,name=CountryCode,json=countryCode" json:"CountryCode,omitempty"`
	City             string `protobuf:"bytes,11,opt,name=City,json=city" json:"City,omitempty"`
	UserAgent        string `protobuf:"bytes,12,opt,name=UserAgent,json=userAgent" json:"UserAgent,omitempty"`
	UserIP           string `protobuf:"bytes,13,opt,name=UserIP,json=userIP" json:"UserIP,omitempty"`
	UserHostname     string `protobuf:"bytes,14,opt,name=UserHostname,json=userHostname" json:"UserHostname,omitempty"`
	Referrer         string `protobuf:"bytes,15,opt,name=Referrer,json=referrer" json:"Referrer,omitempty"`
	ASNumber         int32  `protobuf:"varint,16,opt,name=ASNumber,json=aSNumber" json:"ASNumber,omitempty"`
	ASName           string `protobuf:"bytes,17,opt,name=ASName,json=aSName" json:"ASName,omitempty"`
}

func (m *Session) Reset()                    { *m = Session{} }
func (m *Session) String() string            { return proto.CompactTextString(m) }
func (*Session) ProtoMessage()               {}
func (*Session) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Session) GetDuration() int32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *Session) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *Session) GetDeviceOS() string {
	if m != nil {
		return m.DeviceOS
	}
	return ""
}

func (m *Session) GetBrowserName() string {
	if m != nil {
		return m.BrowserName
	}
	return ""
}

func (m *Session) GetBrowserVersion() string {
	if m != nil {
		return m.BrowserVersion
	}
	return ""
}

func (m *Session) GetBrowserLanguage() string {
	if m != nil {
		return m.BrowserLanguage
	}
	return ""
}

func (m *Session) GetScreenResolution() string {
	if m != nil {
		return m.ScreenResolution
	}
	return ""
}

func (m *Session) GetWindowResolution() string {
	if m != nil {
		return m.WindowResolution
	}
	return ""
}

func (m *Session) GetDeviceType() string {
	if m != nil {
		return m.DeviceType
	}
	return ""
}

func (m *Session) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *Session) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *Session) GetUserAgent() string {
	if m != nil {
		return m.UserAgent
	}
	return ""
}

func (m *Session) GetUserIP() string {
	if m != nil {
		return m.UserIP
	}
	return ""
}

func (m *Session) GetUserHostname() string {
	if m != nil {
		return m.UserHostname
	}
	return ""
}

func (m *Session) GetReferrer() string {
	if m != nil {
		return m.Referrer
	}
	return ""
}

func (m *Session) GetASNumber() int32 {
	if m != nil {
		return m.ASNumber
	}
	return 0
}

func (m *Session) GetASName() string {
	if m != nil {
		return m.ASName
	}
	return ""
}

type Pageview struct {
	Path        string `protobuf:"bytes,1,opt,name=Path,json=path" json:"Path,omitempty"`
	QueryString string `protobuf:"bytes,2,opt,name=QueryString,json=queryString" json:"QueryString,omitempty"`
}

func (m *Pageview) Reset()                    { *m = Pageview{} }
func (m *Pageview) String() string            { return proto.CompactTextString(m) }
func (*Pageview) ProtoMessage()               {}
func (*Pageview) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Pageview) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Pageview) GetQueryString() string {
	if m != nil {
		return m.QueryString
	}
	return ""
}

func init() {
	proto.RegisterType((*User)(nil), "db.User")
	proto.RegisterType((*Teammate)(nil), "db.Teammate")
	proto.RegisterType((*Collection)(nil), "db.Collection")
	proto.RegisterType((*AuthToken)(nil), "db.AuthToken")
	proto.RegisterType((*Session)(nil), "db.Session")
	proto.RegisterType((*Pageview)(nil), "db.Pageview")
}

func init() { proto.RegisterFile("models.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 721 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xdb, 0x8e, 0x1a, 0x39,
	0x10, 0x15, 0xd0, 0x40, 0xb7, 0xb9, 0xae, 0x87, 0x9d, 0xb5, 0x46, 0xab, 0x15, 0x42, 0xab, 0x15,
	0x9a, 0x87, 0xd1, 0x6a, 0xf2, 0x03, 0x21, 0x10, 0x29, 0x28, 0x68, 0x86, 0x18, 0x32, 0x79, 0x76,
	0x77, 0xd7, 0x80, 0x95, 0xbe, 0x10, 0xdb, 0x3d, 0x88, 0xbf, 0xc8, 0x47, 0xe4, 0x25, 0x7f, 0x19,
	0xb9, 0xba, 0x19, 0x2e, 0x93, 0x3c, 0xe4, 0xf1, 0x9c, 0x3a, 0x76, 0xb9, 0xaa, 0x4e, 0x99, 0x34,
	0xe3, 0x34, 0x84, 0x48, 0xdf, 0x6c, 0x54, 0x6a, 0x52, 0x5a, 0x0e, 0xfd, 0xc1, 0x37, 0x87, 0x38,
	0x1f, 0x35, 0x28, 0xda, 0x26, 0xe5, 0xe9, 0x84, 0x95, 0xfa, 0xa5, 0xa1, 0xc3, 0xcb, 0x72, 0x42,
	0x7b, 0xa4, 0xfa, 0x36, 0x16, 0x32, 0x62, 0xe5, 0x7e, 0x69, 0xe8, 0xf1, 0x2a, 0x58, 0x40, 0xaf,
	0x88, 0x3b, 0x17, 0x5a, 0x6f, 0x53, 0x15, 0xb2, 0x0a, 0x06, 0xdc, 0x4d, 0x81, 0x29, 0x23, 0xf5,
	0xb1, 0x02, 0x61, 0x20, 0x64, 0x4e, 0xbf, 0x34, 0xac, 0xf0, 0x7a, 0x90, 0x43, 0x4a, 0x89, 0x73,
	0x27, 0x62, 0x60, 0x55, 0x3c, 0xe1, 0x24, 0x22, 0x06, 0xab, 0x9e, 0xea, 0x51, 0x18, 0xcb, 0x84,
	0x91, 0x7e, 0x69, 0xe8, 0xf2, 0xba, 0xcc, 0x21, 0x1d, 0x92, 0xce, 0x44, 0x6a, 0xe1, 0x47, 0x30,
	0xdf, 0x8e, 0xd7, 0x22, 0x59, 0x01, 0x6b, 0xa0, 0xa2, 0x13, 0x9e, 0xd2, 0xf4, 0x9a, 0x74, 0x67,
	0x32, 0x96, 0x66, 0x9c, 0x46, 0x11, 0x04, 0x46, 0xa6, 0x89, 0x66, 0x4d, 0x94, 0x76, 0xa3, 0x33,
	0xde, 0xde, 0x7a, 0x80, 0x78, 0x8a, 0xb5, 0xfa, 0xa5, 0x61, 0x8b, 0x77, 0x82, 0x53, 0x9a, 0xfe,
	0x4f, 0x2e, 0x8a, 0xfc, 0xb6, 0x31, 0x13, 0x88, 0xc0, 0xc6, 0x58, 0x1b, 0x2f, 0xbe, 0x08, 0x5f,
	0x86, 0xe8, 0xbf, 0xa4, 0x85, 0xbd, 0x7a, 0x00, 0x25, 0x1f, 0x25, 0x84, 0xac, 0x87, 0xda, 0x16,
	0x1c, 0x93, 0xf4, 0x96, 0xf4, 0x8e, 0x54, 0x81, 0xb0, 0x47, 0xdf, 0xc3, 0x8e, 0xfd, 0x89, 0x5d,
	0xe9, 0xc1, 0x4f, 0x62, 0xf6, 0x2d, 0x2f, 0xce, 0x8c, 0x0c, 0xbb, 0xc4, 0xfe, 0x5e, 0xc0, 0xcb,
	0x90, 0xed, 0xc9, 0x7e, 0x42, 0x1c, 0x34, 0x18, 0x9b, 0xe1, 0x2f, 0xcc, 0xd0, 0xdd, 0x9c, 0xf1,
	0xb6, 0x27, 0x27, 0xda, 0x91, 0x61, 0x0c, 0x6f, 0xee, 0x6c, 0x4e, 0xe9, 0xc1, 0x15, 0x71, 0x97,
	0x20, 0xe2, 0x58, 0x18, 0x38, 0x77, 0xca, 0xe0, 0x6b, 0x89, 0x90, 0x43, 0x6b, 0x8f, 0xc2, 0x1e,
	0x1a, 0x89, 0x91, 0xfa, 0xfd, 0x36, 0x01, 0x35, 0x9d, 0xa0, 0x95, 0x1c, 0x5e, 0x4f, 0x73, 0xf8,
	0x6c, 0x8b, 0xca, 0x91, 0x2d, 0xae, 0x89, 0xb7, 0x4f, 0xa4, 0x99, 0xd3, 0xaf, 0x0c, 0x1b, 0xb7,
	0xcd, 0x9b, 0xd0, 0xbf, 0xd9, 0x93, 0xdc, 0x33, 0xfb, 0xf0, 0xb1, 0xe1, 0xaa, 0x27, 0x86, 0x1b,
	0x08, 0xe2, 0x8d, 0x32, 0xb3, 0x5e, 0xa6, 0x9f, 0xe1, 0x77, 0x1e, 0xd4, 0x25, 0x95, 0xe5, 0x72,
	0x86, 0xef, 0xa9, 0xf2, 0x8a, 0x59, 0xce, 0x7e, 0xed, 0xe9, 0xc1, 0x77, 0x87, 0xd4, 0x17, 0xa0,
	0xb5, 0x2d, 0xf9, 0x8a, 0xb8, 0x93, 0x4c, 0xe1, 0x04, 0x30, 0x4f, 0x95, 0xbb, 0x61, 0x81, 0x6d,
	0xec, 0x5d, 0xaa, 0x8d, 0x2d, 0xae, 0x58, 0x25, 0x77, 0x5d, 0x60, 0x3c, 0x07, 0x4f, 0x32, 0x80,
	0xfb, 0xc5, 0x7e, 0x9b, 0xc2, 0x02, 0xd3, 0x3e, 0x69, 0xbc, 0x51, 0xe9, 0x56, 0x83, 0xc2, 0x1e,
	0x39, 0x18, 0x6e, 0xf8, 0x07, 0x8a, 0xfe, 0x47, 0xda, 0x85, 0xe2, 0x01, 0x94, 0x7d, 0x47, 0xb1,
	0x5f, 0x6d, 0xff, 0x84, 0xb5, 0x53, 0x2e, 0x74, 0x33, 0x91, 0xac, 0x32, 0xb1, 0x02, 0x56, 0x43,
	0x61, 0xc7, 0x3f, 0xa5, 0xad, 0x77, 0x16, 0x81, 0x02, 0x48, 0x38, 0xe8, 0x34, 0xca, 0xb0, 0x9e,
	0x7a, 0xee, 0x1d, 0x7d, 0xc6, 0x5b, 0xed, 0x27, 0x99, 0x84, 0xe9, 0xf6, 0x48, 0xeb, 0xe6, 0xda,
	0xed, 0x19, 0x4f, 0xff, 0x21, 0x24, 0xaf, 0x73, 0xb9, 0xdb, 0x00, 0xf3, 0x50, 0x45, 0xc2, 0x67,
	0xc6, 0xd6, 0x3a, 0x4e, 0xb3, 0xc4, 0xa8, 0xdd, 0x38, 0x0d, 0x01, 0xff, 0x03, 0x8f, 0x37, 0x82,
	0x03, 0x65, 0xad, 0x32, 0x96, 0x66, 0x87, 0x1f, 0x81, 0xc7, 0x9d, 0x40, 0x9a, 0x1d, 0xfd, 0x9b,
	0x78, 0x76, 0x0b, 0x47, 0x2b, 0x48, 0x0c, 0xae, 0xbd, 0xc7, 0xbd, 0x6c, 0x4f, 0xd0, 0x4b, 0x52,
	0xb3, 0xd1, 0xe9, 0x1c, 0xd7, 0xdc, 0xe3, 0xb5, 0x0c, 0x11, 0x1d, 0x90, 0xa6, 0xe5, 0x9f, 0x67,
	0xd2, 0xc6, 0x68, 0x33, 0x3b, 0xe2, 0xec, 0x5c, 0x38, 0x3c, 0x82, 0x52, 0xa0, 0x58, 0x27, 0x9f,
	0x8b, 0x2a, 0xb0, 0x8d, 0x8d, 0x16, 0x77, 0x59, 0xec, 0x83, 0x62, 0xdd, 0x7c, 0xd6, 0xa2, 0xc0,
	0x36, 0xe7, 0x68, 0x81, 0xe3, 0xfa, 0x23, 0xcf, 0x29, 0x10, 0x0d, 0x5e, 0xdb, 0x5f, 0x73, 0x05,
	0x4f, 0x12, 0xb6, 0xb6, 0x92, 0xb9, 0x30, 0xeb, 0xc2, 0x8f, 0xce, 0x46, 0x98, 0xb5, 0xad, 0xff,
	0x43, 0x06, 0x6a, 0xb7, 0x30, 0x4a, 0x26, 0xab, 0xc2, 0x26, 0x8d, 0x2f, 0x07, 0xca, 0xaf, 0xe1,
	0x8f, 0xfd, 0xea, 0x47, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4f, 0x92, 0x45, 0xcb, 0xc1, 0x05, 0x00,
	0x00,
}
